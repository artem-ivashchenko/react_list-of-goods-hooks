{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","sortType","setsortType","reverse","setReverse","goods","prepared","sort","good1","good2","LENGTH","length","ALPHABET","localeCompare","Error","getPreparedGoods","className","type","onClick","prev","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,0DAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,gBAAAA,E,qBAAAA,M,KAuCE,IAAME,EAAgB,WAC3B,MAAgCC,mBAAoB,IAApD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEMC,EA/BR,SACEA,EADF,GAGG,IADCJ,EACF,EADEA,SAAUE,EACZ,EADYA,QAENG,EAAQ,YAAOD,GAoBrB,OAlBIJ,GACFK,EAASC,MAAK,SAACC,EAAOC,GACpB,OAAQR,GACN,KAAKJ,EAASa,OACZ,OAAOF,EAAMG,OAASF,EAAME,OAC9B,KAAKd,EAASe,SACZ,OAAOJ,EAAMK,cAAcJ,GAE7B,QACE,MAAM,IAAIK,MAAM,6BAKpBX,GACFG,EAASH,UAGJG,EAOOS,CAAiBjB,EAAiB,CAAEG,WAAUE,YAE5D,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAS,yBACPf,IAAaJ,EAASe,UAAY,YAEpCM,QAAS,kBAAMhB,EAAYL,EAASe,WALtC,iCAUA,wBACEK,KAAK,SACLD,UAAS,4BACPf,IAAaJ,EAASa,QAAU,YAElCQ,QAAS,kBAAMhB,EAAYL,EAASa,SALtC,4BAUA,wBACEO,KAAK,SACLD,UAAS,6BAAwBb,GAAW,YAC5Ce,QAAS,kBAAMd,GAAW,SAACe,GAAD,OAAWA,MAHvC,sBAQElB,GAAYE,IACZ,wBACEc,KAAK,SACLD,UAAU,4BACVE,QAAS,WACPd,GAAW,GACXF,EAAY,KALhB,sBAaJ,6BACGG,EAAMe,KAAI,SAACC,GAAD,OACT,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YC1GlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.50348351.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  LENGTH = 'length',\n  ALPHABET = 'alphabet',\n}\n\ntype SortState = SortType | '';\n\ntype FilterParams = {\n  sortType: SortState;\n  reverse: boolean;\n};\n\nfunction getPreparedGoods(\n  goods: string[],\n  { sortType, reverse }: FilterParams,\n) {\n  const prepared = [...goods];\n\n  if (sortType) {\n    prepared.sort((good1, good2) => {\n      switch (sortType) {\n        case SortType.LENGTH:\n          return good1.length - good2.length;\n        case SortType.ALPHABET:\n          return good1.localeCompare(good2);\n\n        default:\n          throw new Error('Sorting went wrong...');\n      }\n    });\n  }\n\n  if (reverse) {\n    prepared.reverse();\n  }\n\n  return prepared;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setsortType] = useState<SortState>('');\n  const [reverse, setReverse] = useState(false);\n\n  const goods = getPreparedGoods(goodsFromServer, { sortType, reverse });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={`button is-info ${\n            sortType !== SortType.ALPHABET && 'is-light'\n          }`}\n          onClick={() => setsortType(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-success ${\n            sortType !== SortType.LENGTH && 'is-light'\n          }`}\n          onClick={() => setsortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-warning ${!reverse && 'is-light'}`}\n          onClick={() => setReverse((prev) => !prev)}\n        >\n          Reverse\n        </button>\n\n        {(sortType || reverse) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setReverse(false);\n              setsortType('');\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {goods.map((good) => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}